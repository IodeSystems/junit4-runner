#!/usr/bin/env bash
source "$(dirname "$0")"/_init.sh

TARGET="${1-emptystring}"

case $TARGET in
ensure-no-changes)
  if [[ "$(git status --porcelain=v1 2>/dev/null | wc -l | awk '{print $1}')" != "0" ]]; then
    git status --porcelain=v1 2>/dev/null
    exit 1
  fi
  ;;
release)
  dev ensure-no-changes
  $SED_COMMAND --in-place .git/config -e 's|https://github.com/|git@github.com:|'
  VERSION="$(git rev-parse HEAD)"
  BRANCH="v$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout | cut -d '.' -f1,2).x"
  if [[ -z "$(git branch --list "$BRANCH")" ]]; then
    BRANCH="main"
  fi
  echo "Checking out $BRANCH to release from..."
  git checkout "$BRANCH"
  git pull

  CURRENT_VERSION="$(git rev-parse HEAD)"
  if [[ ! "${VERSION}" = "${CURRENT_VERSION}" ]]; then
    echo "Cannot release, tip of main has moved past here."
    exit 1
  fi

  dev ensure-no-changes
  echo "This commit is on tip $BRANCH to release from..."

  echo "Removing snapshot and committing..."
  mvn versions:set -DremoveSnapshot -DgenerateBackupPoms=false
  RELEASE_VERSION="$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)"
  git commit -am "Release new version: ${RELEASE_VERSION}"
  git push

  echo "Deploying to ${RELEASE_VERSION} repository..."
  mvn deploy -Dmaven.install.skip=true -DskipTests -Prelease

  echo "Tagging with ${RELEASE_VERSION}..."
  git tag "${RELEASE_VERSION}"
  git push origin "${RELEASE_VERSION}"

  echo "Bumping to next snapshot..."
  mvn versions:set -DnextSnapshot -DgenerateBackupPoms=false
  SNAPSHOT_VERSION="$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)"

  echo "Committing next snapshot..."
  git commit -am "Next development version ${SNAPSHOT_VERSION}"
  git push

  ;;
*)
  echo "The 'dev' script is for tools that fit in the development workflow

Supported Commands:
  release           release a new version
  ensure-no-changes ensures there are no changes in the working directory
"
esac
